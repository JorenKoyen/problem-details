import { HttpStatus } from './http-status';
import { ProblemDefinitionFactory } from '../problem-definition.factory';
import { v4 as uuid } from 'uuid';

export class ProblemDetail extends Error {
  public static readonly factory = new ProblemDefinitionFactory();

  /**
   * A URI refrence [RFC3986] that identifies the problem type.
   * This specification encourages that, when derefenced, it
   * provides human-readable documentation for the problem type
   * (e.g., using HTML). When this member is not present, it's
   * value is assumbed to be `about:blank`
   */
  readonly type: string;

  /**
   * A short, human readable summary of the problem type.
   * It SHOULD NOT change from occurrence to occurrence of the
   * problem, except for puposes of localization.
   */
  readonly title: string;

  /**
   * The HTTP status code generated by the origin server for this
   * occurence of the problem.
   */
  readonly status: HttpStatus | number;

  /**
   * A unique identifier to easily find the error in logs.
   */
  readonly identifier: string;

  /**
   * An error code that maps 1 to 1 with the type develops can program with
   */
  readonly code: string;

  constructor(code: string) {
    const def = ProblemDetail.factory.getByCode(code);
    super(def.title);

    // complete props
    this.type = def.type;
    this.title = def.title;
    this.status = def.status;
    this.identifier = uuid();
    this.code = code;
  }
}
